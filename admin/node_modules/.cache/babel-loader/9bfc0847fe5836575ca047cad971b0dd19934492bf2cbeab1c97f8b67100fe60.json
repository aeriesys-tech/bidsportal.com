{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Pagination from \"@/components/Pagination.vue\";\nexport default {\n  components: {\n    Pagination\n  },\n  data() {\n    return {\n      meta: {\n        search: \"\",\n        order_by: \"desc\",\n        keyword: \"admin_id\",\n        per_page: 10,\n        totalRows: 0,\n        page: 1,\n        lastPage: 1,\n        from: 1,\n        to: 1,\n        maxPage: 1,\n        trashed: false\n      },\n      admins: [],\n      errors: []\n    };\n  },\n  mounted() {\n    let vm = this;\n    vm.index();\n  },\n  methods: {\n    toggleAdmin(admin) {\n      let vm = this;\n      let confirm_admin = false;\n      if (admin.status) {\n        confirm_admin = confirm(\"Are you sure you want to deactivate admin user ?\");\n      } else {\n        confirm_admin = confirm(\"Are you sure you want to activate admin user ?\");\n      }\n      if (confirm_admin) {\n        vm.$store.dispatch(\"post\", {\n          uri: \"toggleAdmin\",\n          data: admin\n        }).then(response => {\n          vm.index();\n        }).catch(function (error) {\n          vm.errors = error.response.data.errors;\n          vm.$store.dispatch(\"error\", error.response.data.message);\n        });\n      }\n    },\n    index() {\n      let vm = this;\n      vm.$store.dispatch(\"post\", {\n        uri: \"paginateAdmins\",\n        data: vm.meta\n      }).then(response => {\n        vm.admins = response.data.data;\n        vm.meta.totalRows = response.data.meta.total;\n        vm.meta.lastPage = response.data.meta.last_page;\n        vm.meta.from = response.data.meta.from;\n        vm.meta.to = response.data.meta.to;\n        vm.meta.maxPage = vm.meta.lastPage >= 3 ? 3 : vm.meta.lastPage;\n      }).catch(function (error) {\n        vm.errors = error.response.data.errors;\n        vm.$store.dispatch(\"error\", error.response.data.message);\n      });\n    },\n    editAdmin(admin) {\n      this.$router.push(\"/admins/\" + admin.admin_id + \"/edit\");\n    },\n    deleteAdmin(admin) {\n      const confirmDelete = confirm(\"Are you sure you want to delete it ?\");\n      if (confirmDelete) {\n        let vm = this;\n        let loader = vm.$loading.show();\n        vm.$store.dispatch(\"post\", {\n          uri: \"deleteAdmin\",\n          data: admin\n        }).then(response => {\n          loader.hide();\n          vm.$store.dispatch(\"success\", response.data.message);\n          vm.index();\n        }).catch(function (error) {\n          loader.hide();\n          vm.errors = error.response.data.errors;\n          vm.$store.dispatch(\"error\", error.response.data.message);\n        });\n      }\n    },\n    search() {\n      let vm = this;\n      vm.meta.page = 1;\n      vm.index();\n    },\n    onPageChange(page) {\n      let vm = this;\n      vm.meta.page = page;\n      vm.index();\n    },\n    sort(field) {\n      let vm = this;\n      vm.meta.keyword = field;\n      vm.meta.order_by = vm.meta.order_by == \"asc\" ? \"desc\" : \"asc\";\n      vm.index();\n    },\n    onPerPageChange() {\n      this.meta.page = 1;\n      this.index();\n    }\n  }\n};","map":{"version":3,"names":["Pagination","components","data","meta","search","order_by","keyword","per_page","totalRows","page","lastPage","from","to","maxPage","trashed","admins","errors","mounted","vm","index","methods","toggleAdmin","admin","confirm_admin","status","confirm","$store","dispatch","uri","then","response","catch","error","message","total","last_page","editAdmin","$router","push","admin_id","deleteAdmin","confirmDelete","loader","$loading","show","hide","onPageChange","sort","field","onPerPageChange"],"sources":["/private/var/www/html/bidsportal.com/admin/src/views/AdminManagement/Index.vue"],"sourcesContent":["<template>\n    <div class=\"container-fluid pb-3\">\n        <div class=\"d-flex justify-content-between align-items-center\">\n            <h2 class=\"main-title mb-2\">Admin</h2>\n            <router-link to=\"/admin/create\" class=\"btn btn-primary mb-2\">Add Admin</router-link>\n        </div>\n        <div class=\"row g-3\">\n            <div class=\"col-md-12\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <div class=\"d-sm-flex align-items-center justify-content-between\">\n                            <h6 class=\"card-title mb-0\"><strong>Admins</strong></h6>\n                        </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"form-group mb-2 d-flex\">\n                            <input class=\"form-control form-control-sm\" type=\"text\" placeholder=\"Type keyword and press enter key\" v-model=\"meta.search\" @keypress.enter=\"search()\" />\n                        </div>\n                        <div class=\"table-responsive table-responsive-sm\">\n                            <table class=\"table table-striped table-sm text-wrap table-bordered mb-0\">\n                                <thead>\n                                    <tr>\n                                        <th class=\"text-center\">#</th>\n                                        <th @click=\"sort('first_name')\">\n                                            First Name\n                                            <span>\n                                                <i v-if=\"meta.keyword == 'first_name' && meta.order_by == 'asc'\" class=\"ri-arrow-up-line\"></i>\n                                                <i v-else-if=\"meta.keyword == 'first_name' && meta.order_by == 'desc'\" class=\"ri-arrow-down-line\"></i>\n                                                <i v-else class=\"fas fa-sort\"></i>\n                                            </span>\n                                        </th>\n                                        <th @click=\"sort('last_name')\">\n                                            Last Name\n                                            <span>\n                                                <i v-if=\"meta.keyword == 'last_name' && meta.order_by == 'asc'\" class=\"ri-arrow-up-line\"></i>\n                                                <i v-else-if=\"meta.keyword == 'last_name' && meta.order_by == 'desc'\" class=\"ri-arrow-down-line\"></i>\n                                                <i v-else class=\"fas fa-sort\"></i>\n                                            </span>\n                                        </th>\n                                        <th @click=\"sort('email')\">\n                                            Email\n                                            <span>\n                                                <i v-if=\"meta.keyword == 'email' && meta.order_by == 'asc'\" class=\"ri-arrow-up-line\"></i>\n                                                <i v-else-if=\"meta.keyword == 'email' && meta.order_by == 'desc'\" class=\"ri-arrow-down-line\"></i>\n                                                <i v-else class=\"fas fa-sort\"></i>\n                                            </span>\n                                        </th>\n                                        <th @click=\"sort('mobile1')\">\n                                            Mobile1\n                                            <span>\n                                                <i v-if=\"meta.keyword == 'mobile1' && meta.order_by == 'asc'\" class=\"ri-arrow-up-line\"></i>\n                                                <i v-else-if=\"meta.keyword == 'mobile1' && meta.order_by == 'desc'\" class=\"ri-arrow-down-line\"></i>\n                                                <i v-else class=\"fas fa-sort\"></i>\n                                            </span>\n                                        </th>\n                                        <th @click=\"sort('mobile2')\">\n                                            Mobile2\n                                            <span>\n                                                <i v-if=\"meta.keyword == 'mobile2' && meta.order_by == 'asc'\" class=\"ri-arrow-up-line\"></i>\n                                                <i v-else-if=\"meta.keyword == 'mobile2' && meta.order_by == 'desc'\" class=\"ri-arrow-down-line\"></i>\n                                                <i v-else class=\"fas fa-sort\"></i>\n                                            </span>\n                                        </th>\n                                        <th @click=\"sort('role')\">\n                                            Role\n                                            <span>\n                                                <i v-if=\"meta.keyword == 'role' && meta.order_by == 'asc'\" class=\"ri-arrow-up-line\"></i>\n                                                <i v-else-if=\"meta.keyword == 'role' && meta.order_by == 'desc'\" class=\"ri-arrow-down-line\"></i>\n                                                <i v-else class=\"fas fa-sort\"></i>\n                                            </span>\n                                        </th>\n                                        <th @click=\"sort('created_on')\">\n                                            Created Date\n                                            <span>\n                                                <i v-if=\"meta.keyword == 'created_on' && meta.order_by == 'asc'\" class=\"ri-arrow-up-line\"></i>\n                                                <i v-else-if=\"meta.keyword == 'created_on' && meta.order_by == 'desc'\" class=\"ri-arrow-down-line\"></i>\n                                                <i v-else class=\"fas fa-sort\"></i>\n                                            </span>\n                                        </th>\n                                        <th @click=\"sort('last_login')\">\n                                            Last Login\n                                            <span>\n                                                <i v-if=\"meta.keyword == 'last_login' && meta.order_by == 'asc'\" class=\"ri-arrow-up-line\"></i>\n                                                <i v-else-if=\"meta.keyword == 'last_login' && meta.order_by == 'desc'\" class=\"ri-arrow-down-line\"></i>\n                                                <i v-else class=\"fas fa-sort\"></i>\n                                            </span>\n                                        </th>\n                                        <th class=\"text-center\" @click=\"sort('status')\">\n                                            Status\n                                            <span>\n                                                <i v-if=\"meta.keyword == 'status' && meta.order_by == 'asc'\" class=\"ri-arrow-up-line\"></i>\n                                                <i v-else-if=\"meta.keyword == 'status' && meta.order_by == 'desc'\" class=\"ri-arrow-down-line\"></i>\n                                                <i v-else class=\"fas fa-sort\"></i>\n                                            </span>\n                                        </th>\n                                        <th class=\"text-center\">\n                                            Action\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr v-if=\"!admins.length\">\n                                        <td colspan=\"11\" class=\"text-center\">No records found</td>\n                                    </tr>\n                                    <tr v-for=\"admin, key in admins\" :key=\"key\">\n                                        <td class=\"text-center\">{{ meta.from + key }}</td>\n                                        <td>{{admin.first_name}}</td>\n                                        <td>{{admin.last_name}}</td>\n                                        <td>{{admin.email}}</td>\n                                        <td>{{admin.mobile1}}</td>\n                                        <td>{{admin.mobile2}}</td>\n                                        <td>{{admin.role}}</td>\n                                        <td>{{ admin.created_on }}</td>\n                                        <td>{{ admin.last_login }}</td>\n                                        <td class=\"text-center\"> \n                                            <a href=\"javascript:void(0)\" class=\"text-success me-2\" @click=\"toggleAdmin(admin)\">\n                                                <span :class=\"['badge', admin.status == 1 ? 'badge-success' : 'badge-warning']\">\n                                                    {{ admin.status == 1 ? 'Active' : 'Inactive' }}\n                                                </span>\n                                            </a>\n                                        </td>\n                                        <td class=\"text-center\">\n                                            <a href=\"javascript:void(0)\" class=\"text-success me-2\" @click=\"editAdmin(admin)\"><i class=\"ri-pencil-line fs-18 lh-1\"></i></a>\n                                            <a href=\"javascript:void(0)\" class=\"text-danger\" @click=\"deleteAdmin(admin)\"><i class=\"ri-delete-bin-6-line fs-18 lh-1\"></i></a>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <div class=\"card-footer\">\n                        <div class=\"d-flex justify-content-between align-items-center\">\n                            <select class=\"form-select from-select-sm width-75\" v-model=\"meta.per_page\" @change=\"onPerPageChange\">\n                                <option>10</option>\n                                <option>15</option>\n                                <option>20</option>\n                                <option>25</option>\n                                <option>30</option>\n                            </select>\n                            <span>Showing {{ meta.from }} to {{ meta.to }} of {{ meta.totalRows }} entries</span>\n                            <Pagination :maxPage=\"meta.maxPage\" :totalPages=\"meta.lastPage\" :currentPage=\"meta.page\" @pagechanged=\"onPageChange\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n    import Pagination from \"@/components/Pagination.vue\";\n    export default {\n        components: {\n            Pagination,\n        },\n        data() {\n            return {\n                meta: {\n                    search: \"\",\n                    order_by: \"desc\",\n                    keyword: \"admin_id\",\n                    per_page: 10,\n                    totalRows: 0,\n                    page: 1,\n                    lastPage: 1,\n                    from: 1,\n                    to: 1,\n                    maxPage: 1,\n                    trashed: false,\n                },\n                admins: [],\n                errors: [],\n            };\n        },\n        mounted() {\n            let vm = this;\n            vm.index();\n        },\n        methods: {\n            toggleAdmin(admin){\n                let vm = this;\n                let confirm_admin = false\n                if(admin.status){\n                    confirm_admin = confirm(\"Are you sure you want to deactivate admin user ?\")\n                }else{\n                    confirm_admin = confirm(\"Are you sure you want to activate admin user ?\")\n                }\n\n                if(confirm_admin){\n                    vm.$store\n                        .dispatch(\"post\", { uri: \"toggleAdmin\", data: admin })\n                        .then((response) => {\n                            vm.index()\n                        })\n                        .catch(function (error) {\n                            vm.errors = error.response.data.errors;\n                            vm.$store.dispatch(\"error\", error.response.data.message);\n                        });\n                }\n            },\n            index() {\n                let vm = this;\n                vm.$store\n                    .dispatch(\"post\", { uri: \"paginateAdmins\", data: vm.meta })\n                    .then((response) => {\n                        vm.admins = response.data.data;\n                        vm.meta.totalRows = response.data.meta.total;\n                        vm.meta.lastPage = response.data.meta.last_page;\n                        vm.meta.from = response.data.meta.from;\n                        vm.meta.to = response.data.meta.to;\n                        vm.meta.maxPage = vm.meta.lastPage >= 3 ? 3 : vm.meta.lastPage;\n                    })\n                    .catch(function (error) {\n                        vm.errors = error.response.data.errors;\n                        vm.$store.dispatch(\"error\", error.response.data.message);\n                    });\n            },\n            editAdmin(admin) {\n                this.$router.push(\"/admins/\" + admin.admin_id + \"/edit\");\n            },\n            deleteAdmin(admin) {\n                const confirmDelete = confirm(\"Are you sure you want to delete it ?\");\n                if (confirmDelete) {\n                    let vm = this;\n                    let loader = vm.$loading.show();\n                    vm.$store\n                        .dispatch(\"post\", {\n                            uri: \"deleteAdmin\",\n                            data: admin,\n                        })\n                        .then((response) => {\n                            loader.hide();\n                            vm.$store.dispatch(\"success\", response.data.message);\n                            vm.index();\n                        })\n                        .catch(function (error) {\n                            loader.hide();\n                            vm.errors = error.response.data.errors;\n                            vm.$store.dispatch(\"error\", error.response.data.message);\n                        });\n                }\n            },\n            search() {\n                let vm = this;\n                vm.meta.page = 1;\n                vm.index();\n            },\n            onPageChange(page) {\n                let vm = this;\n                vm.meta.page = page;\n                vm.index();\n            },\n            sort(field) {\n                let vm = this;\n                vm.meta.keyword = field;\n                vm.meta.order_by = vm.meta.order_by == \"asc\" ? \"desc\" : \"asc\";\n                vm.index();\n            },\n            onPerPageChange() {\n                this.meta.page = 1;\n                this.index();\n            },\n        },\n    };\n</script>\n<style scoped>\n.badge {\n  display: inline-block;\n  padding: 0.25em 0.6em;\n  font-weight: 500;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: 0.25rem;\n}\n\n/* Variations */\n.badge-success {\n  background-color: #089c2a; /* Green for success */\n}\n\n.badge-warning {\n  background-color: #ffc107; /* Yellow for warning */\n  color: #212529; /* Dark text for contrast */\n}\n\n.badge-danger {\n  background-color: #dc3545; /* Red for danger */\n}\n\n.badge-info {\n  background-color: #17a2b8; /* Cyan for info */\n}\n\n.badge-primary {\n  background-color: #007bff; /* Blue for primary */\n}\n\n.badge-secondary {\n  background-color: #6c757d; /* Gray for secondary */\n}\n</style>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}